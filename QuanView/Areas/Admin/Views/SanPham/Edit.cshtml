@model QuanView.Areas.Admin.Models.SanPhamDto

@{
    ViewData["Title"] = "Sửa sản phẩm";
}
<div class="card">
    <div class="card-header bg-warning text-dark">
        Sửa sản phẩm
    </div>
    <div class="card-body">
        @if (!ViewData.ModelState.IsValid)
        {
            <div class="alert alert-danger">
                @foreach (var error in ViewData.ModelState.Values.SelectMany(v => v.Errors))
                {
                    <p>@error.ErrorMessage</p>
                }
            </div>
        }

        <form asp-area="Admin" asp-controller="SanPham" asp-action="Edit" method="post">
            <input type="hidden" asp-for="IDSanPham" />

            <div class="form-group">
                <label asp-for="MaSanPham"></label>
                <div class="input-group">
                    <input asp-for="MaSanPham" class="form-control" readonly />
                    <div class="input-group-append">
                        <button type="button" class="btn btn-outline-secondary" onclick="generateProductCode()">
                            <i class="fas fa-sync-alt"></i> Tạo mã mới
                        </button>
                    </div>
                </div>
                <small class="form-text text-muted">Mã sản phẩm hiện tại hoặc tạo mã mới</small>
                <span asp-validation-for="MaSanPham" class="text-danger"></span>
            </div>

            <div class="form-group">
                <label asp-for="TenSanPham"></label>
                <input asp-for="TenSanPham" class="form-control" />
                <span asp-validation-for="TenSanPham" class="text-danger"></span>
            </div>

            <!-- Dropdowns -->
            <div class="form-group">
                <label asp-for="IDDanhMuc">Danh mục</label>
                <select asp-for="IDDanhMuc" class="form-control" asp-items="ViewBag.DanhMucs"></select>
            </div>

            <div class="form-group">
                <label asp-for="IDThuongHieu">Thương hiệu</label>
                <select asp-for="IDThuongHieu" class="form-control" asp-items="ViewBag.ThuongHieus"></select>
            </div>

            <div class="form-group">
                <label asp-for="IDChatLieu">Chất liệu</label>
                <select asp-for="IDChatLieu" class="form-control" asp-items="ViewBag.ChatLieus"></select>
            </div>

            <div class="form-group">
                <label asp-for="IDLoaiOng">Loại ống</label>
                <select asp-for="IDLoaiOng" class="form-control" asp-items="ViewBag.LoaiOngs"></select>
            </div>

            <div class="form-group">
                <label asp-for="IDKieuDang">Kiểu dáng</label>
                <select asp-for="IDKieuDang" class="form-control" asp-items="ViewBag.KieuDangs"></select>
            </div>

            <div class="form-group">
                <label asp-for="IDLungQuan">Lưng quần</label>
                <select asp-for="IDLungQuan" class="form-control" asp-items="ViewBag.LungQuans"></select>
            </div>

            <div class="form-group form-check">
                <input asp-for="CoXepLy" class="form-check-input" />
                <label asp-for="CoXepLy" class="form-check-label"></label>
            </div>

            <div class="form-group form-check">
                <input asp-for="CoGian" class="form-check-input" />
                <label asp-for="CoGian" class="form-check-label"></label>
            </div>

            <div class="form-group form-check">
                <input asp-for="TrangThai" class="form-check-input" />
                <label asp-for="TrangThai" class="form-check-label"></label>
            </div>

            <!-- Biến thể sản phẩm -->
            <!-- Biến thể sản phẩm -->
            <!-- Biến thể sản phẩm -->
            @if (Model.ChiTietSanPhams != null && Model.ChiTietSanPhams.Any())
            {
                <h4 class="mt-4">Biến thể sản phẩm</h4>
                <table class="table table-bordered">
                    <thead>
                        <tr>
                            <th>Kích cỡ</th>
                            <th>Màu sắc</th>
                            <th>Họa tiết</th>
                            <th>Số lượng</th>
                            <th>Giá bán</th>
                        </tr>
                    </thead>
                    <tbody>
                        @for (int i = 0; i < Model.ChiTietSanPhams.Count; i++)
                        {
                            <tr>
                                <!-- Hidden fields for model binding -->
                                <input type="hidden" name="ChiTietSanPhams.Index" value="@i" />
                                <input type="hidden" asp-for="ChiTietSanPhams[i].IdSanPhamChiTiet" />
                                <input type="hidden" asp-for="ChiTietSanPhams[i].IdSanPham" />
                                <input type="hidden" asp-for="ChiTietSanPhams[i].IdKichCo" />
                                <input type="hidden" asp-for="ChiTietSanPhams[i].IdMauSac" />
                                <input type="hidden" asp-for="ChiTietSanPhams[i].IdHoaTiet" />

                                <td>@Model.ChiTietSanPhams[i].TenKichCo</td>
                                <td>@Model.ChiTietSanPhams[i].TenMauSac</td>
                                <td>@Model.ChiTietSanPhams[i].TenHoaTiet</td>
                                <td>
                                    <input asp-for="ChiTietSanPhams[i].SoLuong"
                                           class="form-control quantity-input"
                                           type="number"
                                           min="0"
                                           step="1" />
                                </td>
                                <td>
                                    <input asp-for="ChiTietSanPhams[i].GiaBan"
                                           class="form-control price-input"
                                           type="number"
                                           min="0.01"
                                           step="0.01" />
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            }

            <button type="submit" class="btn btn-primary">Cập nhật</button>
            <a asp-area="Admin" asp-controller="SanPham" asp-action="Index" class="btn btn-secondary">Hủy</a>
        </form>
    </div>
</div>
@section Scripts {
    <script>
        // Apply validation to existing inputs when page loads
        document.addEventListener('DOMContentLoaded', function() {
            const quantityInputs = document.querySelectorAll('.quantity-input');
            const priceInputs = document.querySelectorAll('.price-input');
            
            quantityInputs.forEach(input => addValidationToInput(input, 'quantity'));
            priceInputs.forEach(input => addValidationToInput(input, 'price'));
        });
        
        // Function to generate product code
        function generateProductCode() {
            const now = new Date();
            const year = now.getFullYear().toString().substr(-2);
            const month = (now.getMonth() + 1).toString().padStart(2, '0');
            const day = now.getDate().toString().padStart(2, '0');
            const hour = now.getHours().toString().padStart(2, '0');
            const minute = now.getMinutes().toString().padStart(2, '0');
            const second = now.getSeconds().toString().padStart(2, '0');
            const random = Math.floor(Math.random() * 1000).toString().padStart(3, '0');
            
            const productCode = `SP${year}${month}${day}${hour}${minute}${second}${random}`;
            document.querySelector('input[name="MaSanPham"]').value = productCode;
            
            // Show confirmation
            alert(`Đã tạo mã sản phẩm mới: ${productCode}`);
        }
        
        // Validation functions
        function addValidationToInput(input, fieldType) {
            const fieldName = fieldType === 'quantity' ? 'Số lượng' : 'Giá bán';
            
            // Prevent negative input
            input.addEventListener('keydown', function(e) {
                if (e.key === '-' || e.key === 'Minus') {
                    e.preventDefault();
                    showError(this, `${fieldName} không được là số âm!`);
                    return false;
                }
            });
            
            // Validate on input
            input.addEventListener('input', function() {
                const value = parseFloat(this.value);
                if (value < 0 || this.value.includes('-')) {
                    this.value = this.value.replace('-', '');
                    showError(this, `${fieldName} không được là số âm!`);
                } else if (fieldType === 'price' && value === 0) {
                    showError(this, 'Giá bán phải lớn hơn 0!');
                } else {
                    clearError(this);
                }
            });
            
            // Validate on blur
            input.addEventListener('blur', function() {
                const value = parseFloat(this.value);
                if (fieldType === 'price' && value === 0) {
                    showError(this, 'Giá bán phải lớn hơn 0!');
                } else if (value < 0) {
                    this.value = '';
                    showError(this, `${fieldName} không được là số âm!`);
                }
            });
        }
        
        function showError(input, message) {
            clearError(input);
            const errorDiv = document.createElement('div');
            errorDiv.className = 'text-danger validation-error';
            errorDiv.style.fontSize = '0.875em';
            errorDiv.textContent = message;
            errorDiv.id = input.name + '_error';
            input.parentNode.appendChild(errorDiv);
            input.classList.add('is-invalid');
            
            // Auto-hide after 3 seconds
            setTimeout(() => {
                clearError(input);
            }, 3000);
        }
        
        function clearError(input) {
            const error = document.getElementById(input.name + '_error');
            if (error) error.remove();
            input.classList.remove('is-invalid');
        }
        
        // Form validation on submit
        document.querySelector('form').addEventListener('submit', function(e) {
            let hasError = false;
            const quantityInputs = document.querySelectorAll('.quantity-input');
            const priceInputs = document.querySelectorAll('.price-input');
            
            quantityInputs.forEach(input => {
                const value = parseInt(input.value);
                if (isNaN(value) || value < 0) {
                    showError(input, 'Số lượng không được là số âm!');
                    hasError = true;
                }
            });
            
            priceInputs.forEach(input => {
                const value = parseFloat(input.value);
                if (isNaN(value) || value < 0) {
                    showError(input, 'Giá bán không được là số âm!');
                    hasError = true;
                } else if (value === 0) {
                    showError(input, 'Giá bán phải lớn hơn 0!');
                    hasError = true;
                }
            });
            
            if (hasError) {
                e.preventDefault();
                alert('Vui lòng kiểm tra lại thông tin. Số lượng và giá bán không được là số âm!');
                return false;
            }
        });
    </script>
    
    <style>
        .is-invalid {
            border-color: #dc3545;
            box-shadow: 0 0 0 0.2rem rgba(220, 53, 69, 0.25);
        }
        .validation-error {
            margin-top: 5px;
        }
        input[type="number"]::-webkit-outer-spin-button,
        input[type="number"]::-webkit-inner-spin-button {
            -webkit-appearance: none;
            margin: 0;
        }
        input[type="number"] {
            -moz-appearance: textfield;
        }
    </style>
    
    @await Html.PartialAsync("_ValidationScriptsPartial")
}
