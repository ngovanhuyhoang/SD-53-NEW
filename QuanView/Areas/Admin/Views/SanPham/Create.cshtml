@model QuanView.Areas.Admin.Models.SanPhamDto

@{
    ViewData["Title"] = "Th√™m s·∫£n ph·∫©m";
}
<div class="card">
    <div class="card-header bg-primary text-white">
        Th√™m s·∫£n ph·∫©m
    </div>
    <div class="card-body">
        @if (!ViewData.ModelState.IsValid)
        {
            <div class="alert alert-danger">
                @foreach (var error in ViewData.ModelState.Values.SelectMany(v => v.Errors))
                {
                    <p>@error.ErrorMessage</p>
                }
            </div>
        }

        <form asp-area="Admin" asp-controller="SanPham" asp-action="Create" method="post">
            @Html.AntiForgeryToken()
            <!-- Ch·ªçn s·∫£n ph·∫©m ƒë√£ c√≥ -->
            <div class="form-group">
                <label for="sanPhamDaCo">Ch·ªçn s·∫£n ph·∫©m ƒë√£ c√≥ (n·∫øu mu·ªën th√™m bi·∫øn th·ªÉ):</label>
                <select id="sanPhamDaCo" name="SanPhamDaCoId" class="form-control">
                    <option value="">-- T·∫°o s·∫£n ph·∫©m m·ªõi --</option>
                    @if (ViewBag.SanPhams != null)
                    {
                        foreach (var sp in ViewBag.SanPhams as List<SelectListItem>)
                        {
                            <option value="@sp.Value">@sp.Text</option>
                        }
                    }
                </select>
            </div>

            <!-- Th√¥ng tin s·∫£n ph·∫©m m·ªõi -->
            <div id="thongTinSanPhamMoi">
                <div class="form-group">
                    <label asp-for="MaSanPham"></label>
                    <div class="input-group">
                        <input asp-for="MaSanPham" class="form-control" readonly />
                        <div class="input-group-append">
                            <button type="button" class="btn btn-outline-secondary" onclick="generateProductCode()">
                                <i class="fas fa-sync-alt"></i> T·∫°o m√£
                            </button>
                        </div>
                    </div>
                    <small class="form-text text-muted">M√£ s·∫£n ph·∫©m s·∫Ω ƒë∆∞·ª£c t·ª± ƒë·ªông t·∫°o</small>
                    <span asp-validation-for="MaSanPham" class="text-danger"></span>
                </div>

                <div class="form-group">
                    <label asp-for="TenSanPham"></label>
                    <input asp-for="TenSanPham" class="form-control" />
                    <span asp-validation-for="TenSanPham" class="text-danger"></span>
                </div>

                <div class="form-group">
                    <label asp-for="IDDanhMuc">Danh m·ª•c</label>
                    <select asp-for="IDDanhMuc" class="form-control" asp-items="ViewBag.DanhMucs">
                        <option value="">-- Ch·ªçn danh m·ª•c --</option>
                    </select>
                    <span asp-validation-for="IDDanhMuc" class="text-danger"></span>
                </div>

                <div class="form-group">
                    <label asp-for="IDThuongHieu">Th∆∞∆°ng hi·ªáu</label>
                    <select asp-for="IDThuongHieu" class="form-control" asp-items="ViewBag.ThuongHieus">
                        <option value="">-- Ch·ªçn th∆∞∆°ng hi·ªáu --</option>
                    </select>
                    <span asp-validation-for="IDThuongHieu" class="text-danger"></span>
                </div>

                <div class="form-group">
                    <label asp-for="IDChatLieu">Ch·∫•t li·ªáu</label>
                    <select asp-for="IDChatLieu" class="form-control" asp-items="ViewBag.ChatLieus">
                        <option value="">-- Ch·ªçn ch·∫•t li·ªáu --</option>
                    </select>
                    <span asp-validation-for="IDChatLieu" class="text-danger"></span>
                </div>

                <div class="form-group">
                    <label asp-for="IDLoaiOng">Lo·∫°i ·ªëng</label>
                    <select asp-for="IDLoaiOng" class="form-control" asp-items="ViewBag.LoaiOngs">
                        <option value="">-- Ch·ªçn lo·∫°i ·ªëng --</option>
                    </select>
                    <span asp-validation-for="IDLoaiOng" class="text-danger"></span>
                </div>

                <div class="form-group">
                    <label asp-for="IDKieuDang">Ki·ªÉu d√°ng</label>
                    <select asp-for="IDKieuDang" class="form-control" asp-items="ViewBag.KieuDangs">
                        <option value="">-- Ch·ªçn ki·ªÉu d√°ng --</option>
                    </select>
                    <span asp-validation-for="IDKieuDang" class="text-danger"></span>
                </div>

                <div class="form-group">
                    <label asp-for="IDLungQuan">L∆∞ng qu·∫ßn</label>
                    <select asp-for="IDLungQuan" class="form-control" asp-items="ViewBag.LungQuans">
                        <option value="">-- Ch·ªçn l∆∞ng qu·∫ßn --</option>
                    </select>
                    <span asp-validation-for="IDLungQuan" class="text-danger"></span>
                </div>

                <div class="form-group form-check">
                    <input asp-for="CoXepLy" class="form-check-input" />
                    <label asp-for="CoXepLy" class="form-check-label"></label>
                </div>

                <div class="form-group form-check">
                    <input asp-for="CoGian" class="form-check-input" />
                    <label asp-for="CoGian" class="form-check-label"></label>
                </div>

                <div class="form-group form-check">
                    <input asp-for="TrangThai" class="form-check-input" />
                    <label asp-for="TrangThai" class="form-check-label"></label>
                </div>
            </div>

            <!-- PH·∫¶N T·∫†O BI·∫æN TH·ªÇ LU√îN HI·ªÜN -->
            <h4 class="mt-4">Ch·ªçn bi·∫øn th·ªÉ s·∫£n ph·∫©m</h4>
            <div class="form-group">
                <label>K√≠ch c·ª°:</label>
                <select id="kichCoSelect" multiple class="form-control">
                    @if (ViewBag.KichCos != null)
                    {
                        foreach (var item in ViewBag.KichCos as List<SelectListItem>)
                        {
                            <option value="@item.Value">@item.Text</option>
                        }
                    }
                </select>
            </div>
            <div class="form-group">
                <label>M√†u s·∫Øc:</label>
                <select id="mauSacSelect" multiple class="form-control">
                    @if (ViewBag.MauSacs != null)
                    {
                        foreach (var item in ViewBag.MauSacs as List<SelectListItem>)
                        {
                            <option value="@item.Value">@item.Text</option>
                        }
                    }
                </select>
            </div>
            <div class="form-group">
                <label>H·ªça ti·∫øt: <small class="text-muted">(C√≥ th·ªÉ b·ªè qua)</small></label>
                <select id="hoaTietSelect" multiple class="form-control">
                    <option value="">Kh√¥ng c√≥ h·ªça ti·∫øt</option>
                    @if (ViewBag.HoaTiets != null)
                    {
                        foreach (var item in ViewBag.HoaTiets as List<SelectListItem>)
                        {
                            <option value="@item.Value">@item.Text</option>
                        }
                    }
                </select>
            </div>
            <button type="button" class="btn btn-info mb-3" onclick="generateVariants()">T·∫°o bi·∫øn th·ªÉ</button>
            <!-- üßÆ B·∫£ng bi·∫øn th·ªÉ -->
            <table class="table" id="variantTable">
                <thead>
                    <tr>
                        <th>K√≠ch c·ª°</th>
                        <th>M√†u s·∫Øc</th>
                        <th>H·ªça ti·∫øt</th>
                        <th>S·ªë l∆∞·ª£ng</th>
                        <th>Gi√° b√°n</th>
                    </tr>
                </thead>
                <tbody></tbody>
            </table>
            <button type="submit" class="btn btn-success">L∆∞u</button>
            <a asp-area="Admin" asp-controller="SanPham" asp-action="Index" class="btn btn-secondary">H·ªßy</a>
        </form>
    </div>
</div>
@section Scripts {
    <script>
        document.getElementById("sanPhamDaCo").addEventListener("change", function() {
            var isNew = !this.value;
            document.getElementById("thongTinSanPhamMoi").style.display = isNew ? "block" : "none";
        });
        window.addEventListener("DOMContentLoaded", function() {
            var isNew = !document.getElementById("sanPhamDaCo").value;
            document.getElementById("thongTinSanPhamMoi").style.display = isNew ? "block" : "none";
            
            // Auto-generate product code when page loads
            if (isNew) {
                generateProductCode();
            }
        });
        
        // Function to generate product code
        function generateProductCode() {
            const now = new Date();
            const year = now.getFullYear().toString().substr(-2);
            const month = (now.getMonth() + 1).toString().padStart(2, '0');
            const day = now.getDate().toString().padStart(2, '0');
            const hour = now.getHours().toString().padStart(2, '0');
            const minute = now.getMinutes().toString().padStart(2, '0');
            const second = now.getSeconds().toString().padStart(2, '0');
            const random = Math.floor(Math.random() * 1000).toString().padStart(3, '0');
            
            const productCode = `SP${year}${month}${day}${hour}${minute}${second}${random}`;
            document.querySelector('input[name="MaSanPham"]').value = productCode;
        }

        function generateVariants() {
            const kichCos = [...document.getElementById("kichCoSelect").selectedOptions].map(o => ({ id: o.value, text: o.text }));
            const mauSacs = [...document.getElementById("mauSacSelect").selectedOptions].map(o => ({ id: o.value, text: o.text }));
            const hoaTiets = [...document.getElementById("hoaTietSelect").selectedOptions].map(o => ({ id: o.value, text: o.text }));

            const tbody = document.querySelector("#variantTable tbody");
            tbody.innerHTML = "";

            let index = 0;
            kichCos.forEach(kc => {
                mauSacs.forEach(ms => {
                    const hoaTietData = hoaTiets.length > 0 ? hoaTiets : [{ id: "", text: "Kh√¥ng" }];
                    hoaTietData.forEach(ht => {
                        const row = `<tr>
                                    <td>
                                        <input type="hidden" name="ChiTietSanPhams[${index}].IdSanPhamChiTiet" value="00000000-0000-0000-0000-000000000000" />
                                        <input type="hidden" name="ChiTietSanPhams[${index}].IdKichCo" value="${kc.id}" />
                                        ${kc.text}
                                    </td>
                                    <td>
                                        <input type="hidden" name="ChiTietSanPhams[${index}].IdMauSac" value="${ms.id}" />
                                        ${ms.text}
                                    </td>
                                    <td>
                                        <input type="hidden" name="ChiTietSanPhams[${index}].IdHoaTiet" value="${ht.id}" />
                                        ${ht.text}
                                    </td>
                                    <td>
                                        <input name="ChiTietSanPhams[${index}].SoLuong" type="number" class="form-control quantity-input" min="0" step="1" value="0" />
                                    </td>
                                    <td>
                                        <input name="ChiTietSanPhams[${index}].GiaBan" type="number" class="form-control price-input" min="0.01" step="0.01" value="0" />
                                    </td>
                                </tr>`;
                        tbody.insertAdjacentHTML("beforeend", row);
                        
                        // Apply validation to newly created inputs
                        setTimeout(() => {
                            const quantityInput = document.querySelector(`input[name="ChiTietSanPhams[${index}].SoLuong"]`);
                            const priceInput = document.querySelector(`input[name="ChiTietSanPhams[${index}].GiaBan"]`);
                            if (quantityInput) addValidationToInput(quantityInput, 'quantity');
                            if (priceInput) addValidationToInput(priceInput, 'price');
                        }, 100);
                        
                        index++;
                    });
                });
            });
        }
        
        // Validation functions
        function addValidationToInput(input, fieldType) {
            const fieldName = fieldType === 'quantity' ? 'S·ªë l∆∞·ª£ng' : 'Gi√° b√°n';
            
            // Prevent negative input
            input.addEventListener('keydown', function(e) {
                if (e.key === '-' || e.key === 'Minus') {
                    e.preventDefault();
                    showError(this, `${fieldName} kh√¥ng ƒë∆∞·ª£c l√† s·ªë √¢m!`);
                    return false;
                }
            });
            
            // Validate on input
            input.addEventListener('input', function() {
                const value = parseFloat(this.value);
                if (value < 0 || this.value.includes('-')) {
                    this.value = '';
                    showError(this, `${fieldName} kh√¥ng ƒë∆∞·ª£c l√† s·ªë √¢m!`);
                } else if (fieldType === 'price' && value === 0) {
                    showError(this, 'Gi√° b√°n ph·∫£i l·ªõn h∆°n 0!');
                } else {
                    clearError(this);
                }
            });
        }
        
        function showError(input, message) {
            clearError(input);
            const errorDiv = document.createElement('div');
            errorDiv.className = 'text-danger validation-error';
            errorDiv.style.fontSize = '0.875em';
            errorDiv.textContent = message;
            errorDiv.id = input.name + '_error';
            input.parentNode.appendChild(errorDiv);
            input.classList.add('is-invalid');
        }
        
        function clearError(input) {
            const error = document.getElementById(input.name + '_error');
            if (error) error.remove();
            input.classList.remove('is-invalid');
        }
        
        // Form validation on submit
        document.querySelector('form').addEventListener('submit', function(e) {
            let hasError = false;
            const quantityInputs = document.querySelectorAll('.quantity-input');
            const priceInputs = document.querySelectorAll('.price-input');
            
            quantityInputs.forEach(input => {
                const value = parseInt(input.value);
                if (value < 0) {
                    showError(input, 'S·ªë l∆∞·ª£ng kh√¥ng ƒë∆∞·ª£c l√† s·ªë √¢m!');
                    hasError = true;
                }
            });
            
            priceInputs.forEach(input => {
                const value = parseFloat(input.value);
                if (value < 0) {
                    showError(input, 'Gi√° b√°n kh√¥ng ƒë∆∞·ª£c l√† s·ªë √¢m!');
                    hasError = true;
                } else if (value === 0) {
                    showError(input, 'Gi√° b√°n ph·∫£i l·ªõn h∆°n 0!');
                    hasError = true;
                }
            });
            
            if (hasError) {
                e.preventDefault();
                alert('Vui l√≤ng ki·ªÉm tra l·∫°i th√¥ng tin. S·ªë l∆∞·ª£ng v√† gi√° b√°n kh√¥ng ƒë∆∞·ª£c l√† s·ªë √¢m!');
                return false;
            }
        });
    </script>
    
    <style>
        .is-invalid {
            border-color: #dc3545;
            box-shadow: 0 0 0 0.2rem rgba(220, 53, 69, 0.25);
        }
        .validation-error {
            margin-top: 5px;
        }
        input[type="number"]::-webkit-outer-spin-button,
        input[type="number"]::-webkit-inner-spin-button {
            -webkit-appearance: none;
            margin: 0;
        }
        input[type="number"] {
            -moz-appearance: textfield;
        }
    </style>
    
    @await Html.PartialAsync("_ValidationScriptsPartial")
}
